"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const colors_1 = require("../../common/colors");
const Icon_1 = __importDefault(require("../icon/Icon"));
const ToggleSwitch = ({ initialChecked = false, disabled = false, scale = 1, ...props }) => {
    const [id] = react_1.useState('toggle-switch-' + Math.floor(Math.random() * 1000));
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Checkbox, Object.assign({ id: id, type: "checkbox", defaultChecked: initialChecked, disabled: disabled }, props)),
        react_1.default.createElement(ToggleSwitchContainer, { htmlFor: id, scale: scale, borderScale: 3, slideWidth: 1.6 },
            react_1.default.createElement(Slider, null,
                react_1.default.createElement(CheckIcon, { name: "clear", className: "is-not-checked" }),
                react_1.default.createElement(CheckIcon, { name: "check", className: "is-checked" })))));
};
exports.default = ToggleSwitch;
const Checkbox = styled_components_1.default.input `
  display: none;
  position: relative;

  &:checked {
    & + label > div {
      background: ${colors_1.colors.success};
      left: calc(100% - 1em);
    }
    & + label > div > .is-not-checked {
      display: none;
    }
  }

  &:not(:checked) {
    & + label > div > .is-checked {
      display: none;
    }
  }

  &:disabled {
    & + label {
      background: ${colors_1.colors.grayLighten90};
      cursor: not-allowed;

      & > div {
        background: ${colors_1.colors.grayLighten60};
      }
    }
  }
`;
const ToggleSwitchContainer = styled_components_1.default.label `
  position: relative;
  display: inline-block;
  background: #fff;
  font-size: ${({ scale }) => scale * 20 + 'px'};
  width: ${({ scale, borderScale, slideWidth }) => scale * (20 + borderScale * 4) * slideWidth + 'px'};
  height: ${({ scale, borderScale }) => scale * (20 + borderScale * 4) + 'px'};
  padding: ${({ scale, borderScale }) => scale * borderScale * 2 + 'px'};
  box-shadow: inset 0 0 0 ${({ scale, borderScale }) => scale * borderScale + 'px'} ${colors_1.colors.grayLighten60};
  border-radius: ${({ scale }) => scale + 'em'};
  box-sizing: border-box;
  cursor: pointer;

  &:focus {
    outline: none;
  }
`;
const Slider = styled_components_1.default.div `
  position: relative;
  left: 0;
  width: 1em;
  height: 1em;
  font-size: 1em;
  color: ${colors_1.colors.white};
  background: ${colors_1.colors.error};
  transition: left 0.2s, background 0.2s;
  border-radius: 50%;
`;
const CheckIcon = styled_components_1.default(Icon_1.default) `
  display: block;
`;
//# sourceMappingURL=ToggleSwitch.js.map