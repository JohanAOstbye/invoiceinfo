"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const colors_1 = require("../../common/colors");
const TabContainer = styled_components_1.default.div `
  position: relative;
  display: flex;
`;
const dividerHeight = 3;
const Slider = styled_components_1.default.div `
  transition: all 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
  border-top: ${dividerHeight}px solid ${colors_1.colors.primary};
  width: ${({ width }) => width}px;
  margin-left: ${({ offset }) => offset}px;
  margin-top: -${dividerHeight}px;
  margin-bottom: 10px;
`;
const SliderBackground = styled_components_1.default.hr `
  border-top: ${dividerHeight}px solid ${colors_1.colors.grayLighten90};
  border-bottom: none;
  border-left: none;
  border-right: none;
  outline: 0;
  margin: 0;
`;
const TabSelect = ({ activeTab, children, ...rest }) => {
    const [sliderOffset, setSliderOffset] = react_1.useState(0);
    const [sliderWidth, setSliderWidth] = react_1.useState(0);
    const selectedTab = react_1.useRef(null);
    react_1.useEffect(() => {
        if (selectedTab && selectedTab.current) {
            setSliderOffset(selectedTab.current.offsetLeft);
            setSliderWidth(selectedTab.current.clientWidth);
        }
    }, [activeTab]);
    // Store a reference to the selected tab, and set its `selected` prop.
    const updatedChildren = react_1.default.Children.map(children, (child) => {
        if (!react_1.default.isValidElement(child)) {
            return child;
        }
        if (child.props.tab === activeTab) {
            return react_1.default.cloneElement(child, {
                ref: selectedTab,
                selected: true,
            });
        }
        return react_1.default.cloneElement(child);
    });
    return (react_1.default.createElement("div", Object.assign({}, rest),
        react_1.default.createElement(TabContainer, null, updatedChildren),
        react_1.default.createElement(SliderBackground, null),
        react_1.default.createElement(Slider, { offset: sliderOffset, width: sliderWidth })));
};
exports.default = TabSelect;
//# sourceMappingURL=TabSelect.js.map