"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const styled_components_1 = __importStar(require("styled-components"));
const TextStyle = styled_components_1.css `
  &:first-child {
    margin-top: 0;
  }

  &:last-child {
    margin-bottom: 0;
  }
`;
exports.Info = styled_components_1.default.p `
  font-size: var(--font-size-sm);
  ${TextStyle}
`;
exports.Ingress = styled_components_1.default.p `
  font-size: var(--font-size-md);
  margin: 2rem 0;
  font-style: italic;
  ${TextStyle}
`;
exports.Paragraph = styled_components_1.default.p `
  font-size: var(--font-size-md);
  margin: 2rem 0;
  ${TextStyle}
`;
const StyledQuote = styled_components_1.default.blockquote `
  font-size: var(--font-size-lg);
  margin: 2rem 0;
  ${TextStyle}

  & > p {
    margin: 0;
    display: inline;
    font-size: var(--font-size-lg);
  }
`;
exports.Quote = ({ children, by = '', ...props }) => {
    let source = null;
    let quote = children;
    if (by) {
        source = by;
    }
    else if (typeof quote !== 'string' && children && quote.length && quote.slice(-1)[0].props.children) {
        // Check if there are any source on the quote
        let sourceChildren = quote.slice(-1)[0].props.children;
        if (typeof sourceChildren === 'string') {
            sourceChildren = [sourceChildren];
        }
        if (sourceChildren[0].indexOf('-- ') === 0) {
            // Get the source from markdown quote
            source = sourceChildren.map((e, i) => i === 0 && typeof e === 'string' ? e.replace(/^-- /, '') : e);
            // Remove source from quote
            quote = quote.slice(0, -1);
        }
    }
    return (react_1.default.createElement(StyledQuote, Object.assign({}, props),
        "\u00AB",
        quote,
        "\u00BB ",
        source));
};
//# sourceMappingURL=Text.js.map