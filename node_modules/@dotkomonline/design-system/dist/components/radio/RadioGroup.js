"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const lodash_1 = __importDefault(require("lodash"));
const RadioButton_1 = __importDefault(require("./RadioButton"));
const Radio = ({ disabled, groupName, error, onChange, children }) => {
    const [checked, setChecked] = react_1.useState();
    const [hasSetDefaultChecked, setHasSetDefaultChecked] = react_1.useState(false);
    const groupId = groupName || lodash_1.default.uniqueId();
    const update = (event) => {
        setChecked(event.currentTarget.value);
        if (onChange)
            onChange(event.currentTarget.value);
    };
    const radios = react_1.default.Children.map(children, (child) => {
        if (react_1.default.isValidElement(child) && child.type === RadioButton_1.default) {
            if (!hasSetDefaultChecked && child.props['checked']) {
                setHasSetDefaultChecked(true);
                setChecked(child.props['value']);
            }
            const props = {
                checked: child.props['value'] === checked,
                groupName: groupId,
                onChange: update,
                disabled: disabled,
                error: error,
            };
            return react_1.default.cloneElement(child, props);
        }
        return child;
    });
    return react_1.default.createElement(RadioGroupWrapper, { error: error }, radios);
};
const RadioGroupWrapper = styled_components_1.default.div `
  & > * + * {
    margin-top: 0.5rem;
  }
`;
exports.default = Radio;
//# sourceMappingURL=RadioGroup.js.map