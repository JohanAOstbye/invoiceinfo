{"ast":null,"code":"var _jsxFileName = \"/home/johan/myshit/invoiceinfo/src/components/Inputs/Select.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n// import styled from 'styled-components';\nimport ReactSelect from 'react-select';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledSelect = styled(ReactSelect)`\n    transition: all 0.2s;\n    padding: 8px 20px 8px 8px;\n    background: #fff;\n    border-radius: 3px;\n    border: 2px solid #ababab;\n    cursor: pointer;\n    &:hover {\n      border-color: #blue;\n    }\n    appearance: none;\n  `;\n_c = StyledSelect;\n\nconst SelectTest = ({\n  options,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(StyledSelect, {\n  options: options,\n  ...rest\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 65\n}, this);\n\n_c2 = SelectTest;\n\nconst SelectBase = ({ ...props\n}) => {\n  _s();\n\n  const [selectedOption, setSelectedOption] = useState(props.options[0]);\n\n  const handleChange = option => {\n    setSelectedOption(option);\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(SelectTest, {\n      name: props.name,\n      options: props.options,\n      value: selectedOption,\n      onChange: option => handleChange(option)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectBase, \"mvfafesjcw/Bcnz8kc37RbkbGMc=\");\n\n_c3 = SelectBase;\nconst S = {\n  Wrapper: styled.div`\n      display: flex;\n      justify-content: center;\n      margin-bottom: 1.3rem;\n  \n      & > div {\n        max-width: 500px;\n        width: 100%;\n      }\n    `\n};\nconst Select = styled(SelectBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\nexport default Select;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledSelect\");\n$RefreshReg$(_c2, \"SelectTest\");\n$RefreshReg$(_c3, \"SelectBase\");","map":{"version":3,"sources":["/home/johan/myshit/invoiceinfo/src/components/Inputs/Select.tsx"],"names":["React","useState","ReactSelect","styled","StyledSelect","SelectTest","options","rest","SelectBase","props","selectedOption","setSelectedOption","handleChange","option","name","S","Wrapper","div","Select"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAA6C,mBAA7C;;AAME,MAAMC,YAAY,GAAGD,MAAM,CAACD,WAAD,CAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXE;KAAME,Y;;AAaN,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAW,KAAGC;AAAd,CAAD,kBAA2C,QAAC,YAAD;AAAc,EAAA,OAAO,EAAED,OAAvB;AAAA,KAAoCC;AAApC;AAAA;AAAA;AAAA;AAAA,QAA9D;;MAAMF,U;;AAaR,MAAMG,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAA8B;AAAA;;AAC7C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAACQ,KAAK,CAACH,OAAN,CAAc,CAAd,CAAD,CAApD;;AAEF,QAAMM,YAAY,GAAIC,MAAD,IAAwB;AAC3CF,IAAAA,iBAAiB,CAACE,MAAD,CAAjB;AACD,GAFD;;AAIA,sBACE,QAAC,CAAD,CAAG,OAAH;AAAA,2BACI,QAAC,UAAD;AACN,MAAA,IAAI,EAAEJ,KAAK,CAACK,IADN;AAEN,MAAA,OAAO,EAAEL,KAAK,CAACH,OAFT;AAGN,MAAA,KAAK,EAAEI,cAHD;AAIN,MAAA,QAAQ,EAAGG,MAAD,IAAwBD,YAAY,CAACC,MAAD;AAJxC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAnBD;;GAAML,U;;MAAAA,U;AAqBN,MAAMO,CAAC,GAAG;AACNC,EAAAA,OAAO,EAAEb,MAAM,CAACc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVU,CAAV;AAaA,MAAMC,MAAM,GAAGf,MAAM,CAACK,UAAD,CAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,eAAeU,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Select as DsSelect } from '@dotkomonline/design-system';\n// import styled from 'styled-components';\nimport ReactSelect from 'react-select';\nimport styled, { StyledComponentProps } from 'styled-components';\n\ninterface SelectPropsTest extends StyledComponentProps<'select', any, any, any> {\n    options: OptionType[];\n  }\n  \n  const StyledSelect = styled(ReactSelect)`\n    transition: all 0.2s;\n    padding: 8px 20px 8px 8px;\n    background: #fff;\n    border-radius: 3px;\n    border: 2px solid #ababab;\n    cursor: pointer;\n    &:hover {\n      border-color: #blue;\n    }\n    appearance: none;\n  `;\n  \n  const SelectTest = ({ options, ...rest }: SelectPropsTest) => <StyledSelect options={options} {...rest} />;\n\nexport interface OptionType {\n    value: string;\n    label: string;\n}\n\n\ninterface SelectProps {\n  name: string;\n  options: OptionType[];\n}\n\nconst SelectBase = ({...props }: SelectProps) => {\n    const [selectedOption, setSelectedOption] = useState(props.options[0]);\n\n  const handleChange = (option: OptionType) => {\n    setSelectedOption(option);\n  };\n\n  return (\n    <S.Wrapper>\n        <SelectTest\n  name={props.name}\n  options={props.options}\n  value={selectedOption}\n  onChange={(option: OptionType) => handleChange(option)}\n  />\n\n    </S.Wrapper>\n  \n  )\n};\n\nconst S = {\n    Wrapper: styled.div`\n      display: flex;\n      justify-content: center;\n      margin-bottom: 1.3rem;\n  \n      & > div {\n        max-width: 500px;\n        width: 100%;\n      }\n    `,\n  };\n\nconst Select = styled(SelectBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}