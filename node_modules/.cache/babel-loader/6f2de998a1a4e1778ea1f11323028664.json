{"ast":null,"code":"var _jsxFileName = \"/home/johan/myshit/invoiceinfo/src/components/Inputs/Checkbox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Checkbox as DsCheckbox } from '@dotkomonline/design-system';\nimport { useField } from 'formik';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckboxBase = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  const [field, meta, helpers] = useField({\n    type: 'checkbox',\n    ...props,\n    multiple: false\n  });\n  const formInterests = meta.value;\n  const {\n    setValue\n  } = helpers;\n  const [isChecked, setIsChecked] = useState(false);\n  useEffect(() => {\n    if (isChecked) {\n      // Only add value if the list doesn't contain the value\n      if (formInterests.indexOf(field.value) === -1) {\n        setValue([...formInterests, field.value]);\n      }\n    } else {\n      const newInterest = formInterests.filter(interest => interest !== field.value);\n      setValue(newInterest);\n    }\n  }, [isChecked, formInterests]);\n\n  const handleChange = checked => {\n    setIsChecked(!!checked);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DsCheckbox, {\n    label: label,\n    isChecked: isChecked,\n    ...props,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CheckboxBase, \"hAoDFrijaw5G/CjLK2boQfdafO4=\", false, function () {\n  return [useField];\n});\n\n_c = CheckboxBase;\nconst Checkbox = styled(CheckboxBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\nexport default Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxBase\");","map":{"version":3,"sources":["/home/johan/myshit/invoiceinfo/src/components/Inputs/Checkbox.tsx"],"names":["React","useState","useEffect","Checkbox","DsCheckbox","useField","styled","CheckboxBase","label","props","field","meta","helpers","type","multiple","formInterests","value","setValue","isChecked","setIsChecked","indexOf","newInterest","filter","interest","handleChange","checked"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAQ,IAAIC,UAArB,QAAuC,6BAAvC;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAQA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAwC;AAAA;;AAC3D,QAAM,CAACC,KAAD,EAAQC,IAAR,EAAcC,OAAd,IAAyBP,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE,UAAR;AAAoB,OAAGJ,KAAvB;AAA8BK,IAAAA,QAAQ,EAAE;AAAxC,GAAD,CAAvC;AACA,QAAMC,aAAuB,GAAGJ,IAAI,CAACK,KAArC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeL,OAArB;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,SAAJ,EAAe;AACb;AACA,UAAIH,aAAa,CAACK,OAAd,CAAsBV,KAAK,CAACM,KAA5B,MAAuC,CAAC,CAA5C,EAA+C;AAC7CC,QAAAA,QAAQ,CAAC,CAAC,GAAGF,aAAJ,EAAmBL,KAAK,CAACM,KAAzB,CAAD,CAAR;AACD;AACF,KALD,MAKO;AACL,YAAMK,WAAW,GAAGN,aAAa,CAACO,MAAd,CAAsBC,QAAD,IAAcA,QAAQ,KAAKb,KAAK,CAACM,KAAtD,CAApB;AACAC,MAAAA,QAAQ,CAACI,WAAD,CAAR;AACD;AACF,GAVQ,EAUN,CAACH,SAAD,EAAYH,aAAZ,CAVM,CAAT;;AAYA,QAAMS,YAAY,GAAIC,OAAD,IAAuB;AAC1CN,IAAAA,YAAY,CAAC,CAAC,CAACM,OAAH,CAAZ;AACD,GAFD;;AAIA,sBAAO,QAAC,UAAD;AAAY,IAAA,KAAK,EAAEjB,KAAnB;AAA0B,IAAA,SAAS,EAAEU,SAArC;AAAA,OAAoDT,KAApD;AAA2D,IAAA,QAAQ,EAAEe;AAArE;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAvBD;;GAAMjB,Y;UAC2BF,Q;;;KAD3BE,Y;AAyBN,MAAMJ,QAAQ,GAAGG,MAAM,CAACC,YAAD,CAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,eAAeJ,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Checkbox as DsCheckbox } from '@dotkomonline/design-system';\nimport { useField } from 'formik';\nimport styled from 'styled-components';\n\ninterface CheckboxProps {\n  value: string;\n  name: string;\n  label: string;\n}\n\nconst CheckboxBase = ({ label, ...props }: CheckboxProps) => {\n  const [field, meta, helpers] = useField({ type: 'checkbox', ...props, multiple: false });\n  const formInterests: string[] = meta.value;\n  const { setValue } = helpers;\n  const [isChecked, setIsChecked] = useState(false);\n\n  useEffect(() => {\n    if (isChecked) {\n      // Only add value if the list doesn't contain the value\n      if (formInterests.indexOf(field.value) === -1) {\n        setValue([...formInterests, field.value]);\n      }\n    } else {\n      const newInterest = formInterests.filter((interest) => interest !== field.value);\n      setValue(newInterest);\n    }\n  }, [isChecked, formInterests]);\n\n  const handleChange = (checked?: boolean) => {\n    setIsChecked(!!checked);\n  };\n\n  return <DsCheckbox label={label} isChecked={isChecked} {...props} onChange={handleChange} />;\n};\n\nconst Checkbox = styled(CheckboxBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}