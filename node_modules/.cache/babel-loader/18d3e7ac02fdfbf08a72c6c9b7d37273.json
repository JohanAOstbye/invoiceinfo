{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importDefault(require(\"react\"));\n\nconst styled_components_1 = __importStar(require(\"styled-components\"));\n\nconst TextStyle = styled_components_1.css`\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nexports.Info = styled_components_1.default.p`\n  font-size: var(--font-size-sm);\n  ${TextStyle}\n`;\nexports.Ingress = styled_components_1.default.p`\n  font-size: var(--font-size-md);\n  margin: 2rem 0;\n  font-style: italic;\n  ${TextStyle}\n`;\nexports.Paragraph = styled_components_1.default.p`\n  font-size: var(--font-size-md);\n  margin: 2rem 0;\n  ${TextStyle}\n`;\nconst StyledQuote = styled_components_1.default.blockquote`\n  font-size: var(--font-size-lg);\n  margin: 2rem 0;\n  ${TextStyle}\n\n  & > p {\n    margin: 0;\n    display: inline;\n    font-size: var(--font-size-lg);\n  }\n`;\n\nexports.Quote = ({\n  children,\n  by = '',\n  ...props\n}) => {\n  let source = null;\n  let quote = children;\n\n  if (by) {\n    source = by;\n  } else if (typeof quote !== 'string' && children && quote.length && quote.slice(-1)[0].props.children) {\n    // Check if there are any source on the quote\n    let sourceChildren = quote.slice(-1)[0].props.children;\n\n    if (typeof sourceChildren === 'string') {\n      sourceChildren = [sourceChildren];\n    }\n\n    if (sourceChildren[0].indexOf('-- ') === 0) {\n      // Get the source from markdown quote\n      source = sourceChildren.map((e, i) => i === 0 && typeof e === 'string' ? e.replace(/^-- /, '') : e); // Remove source from quote\n\n      quote = quote.slice(0, -1);\n    }\n  }\n\n  return react_1.default.createElement(StyledQuote, Object.assign({}, props), \"\\u00AB\", quote, \"\\u00BB \", source);\n};","map":{"version":3,"sources":["../../../src/components/typography/Text.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,YAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AAMA,MAAM,SAAS,GAAG,mBAAA,CAAA,GAAG;;;;;;;;AAQpB,CARD;AAUa,OAAA,CAAA,IAAA,GAAO,mBAAA,CAAA,OAAA,CAAO,CAAC;;IAExB,SAAS;AACZ,CAHY;AAKA,OAAA,CAAA,OAAA,GAAU,mBAAA,CAAA,OAAA,CAAO,CAAC;;;;IAI3B,SAAS;AACZ,CALY;AAOA,OAAA,CAAA,SAAA,GAAY,mBAAA,CAAA,OAAA,CAAO,CAAC;;;IAG7B,SAAS;AACZ,CAJY;AAMb,MAAM,WAAW,GAAG,mBAAA,CAAA,OAAA,CAAO,UAAU;;;IAGjC,SAAS;;;;;;;AAOZ,CAVD;;AAYa,OAAA,CAAA,KAAA,GAAwB,CAAC;AAAE,EAAA,QAAF;AAAY,EAAA,EAAE,GAAG,EAAjB;AAAqB,KAAG;AAAxB,CAAD,KAA6D;AAChG,MAAI,MAAM,GAAG,IAAb;AACA,MAAI,KAAK,GAAG,QAAZ;;AACA,MAAI,EAAJ,EAAQ;AACN,IAAA,MAAM,GAAG,EAAT;AACD,GAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,QAA7B,IAAyC,KAAK,CAAC,MAA/C,IAAyD,KAAK,CAAC,KAAN,CAAY,CAAC,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,CAAyB,QAAtF,EAAgG;AACrG;AACA,QAAI,cAAc,GAAG,KAAK,CAAC,KAAN,CAAY,CAAC,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,CAAyB,QAA9C;;AACA,QAAI,OAAO,cAAP,KAA0B,QAA9B,EAAwC;AACtC,MAAA,cAAc,GAAG,CAAC,cAAD,CAAjB;AACD;;AACD,QAAI,cAAc,CAAC,CAAD,CAAd,CAAkB,OAAlB,CAA0B,KAA1B,MAAqC,CAAzC,EAA4C;AAC1C;AACA,MAAA,MAAM,GAAG,cAAc,CAAC,GAAf,CAAmB,CAAC,CAAD,EAA0B,CAA1B,KAC1B,CAAC,KAAK,CAAN,IAAW,OAAO,CAAP,KAAa,QAAxB,GAAmC,CAAC,CAAC,OAAF,CAAU,MAAV,EAAkB,EAAlB,CAAnC,GAA2D,CADpD,CAAT,CAF0C,CAM1C;;AACA,MAAA,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;AACD;AACF;;AACD,SACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAD,EAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,CAAZ,E,QAAA,EACI,KADJ,E,SAAA,EACa,MADb,CADF;AAKD,CA1BY","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importDefault(require(\"react\"));\nconst styled_components_1 = __importStar(require(\"styled-components\"));\nconst TextStyle = styled_components_1.css `\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\nexports.Info = styled_components_1.default.p `\n  font-size: var(--font-size-sm);\n  ${TextStyle}\n`;\nexports.Ingress = styled_components_1.default.p `\n  font-size: var(--font-size-md);\n  margin: 2rem 0;\n  font-style: italic;\n  ${TextStyle}\n`;\nexports.Paragraph = styled_components_1.default.p `\n  font-size: var(--font-size-md);\n  margin: 2rem 0;\n  ${TextStyle}\n`;\nconst StyledQuote = styled_components_1.default.blockquote `\n  font-size: var(--font-size-lg);\n  margin: 2rem 0;\n  ${TextStyle}\n\n  & > p {\n    margin: 0;\n    display: inline;\n    font-size: var(--font-size-lg);\n  }\n`;\nexports.Quote = ({ children, by = '', ...props }) => {\n    let source = null;\n    let quote = children;\n    if (by) {\n        source = by;\n    }\n    else if (typeof quote !== 'string' && children && quote.length && quote.slice(-1)[0].props.children) {\n        // Check if there are any source on the quote\n        let sourceChildren = quote.slice(-1)[0].props.children;\n        if (typeof sourceChildren === 'string') {\n            sourceChildren = [sourceChildren];\n        }\n        if (sourceChildren[0].indexOf('-- ') === 0) {\n            // Get the source from markdown quote\n            source = sourceChildren.map((e, i) => i === 0 && typeof e === 'string' ? e.replace(/^-- /, '') : e);\n            // Remove source from quote\n            quote = quote.slice(0, -1);\n        }\n    }\n    return (react_1.default.createElement(StyledQuote, Object.assign({}, props),\n        \"\\u00AB\",\n        quote,\n        \"\\u00BB \",\n        source));\n};\n//# sourceMappingURL=Text.js.map"]},"metadata":{},"sourceType":"script"}