{"ast":null,"code":"var _jsxFileName = \"/home/johan/myshit/invoiceinfo/src/components/Form/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Formik } from 'formik';\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ValidationSchema } from '../../common/ValidaitonSchema';\nimport InformationArea from './Areas/InformationArea';\nimport { Banner } from '../Banner';\nimport CompanyArea from './Areas/CompanyArea';\nimport ContactPersonArea from './Areas/ContactPersonArea';\nimport OccationArea from './Areas/OccationArea';\nimport CommentsArea from './Areas/CommentsArea';\nimport SubmitArea from './Areas/SubmitArea';\nimport InvoiceArea from './Areas/InvoiceArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = styled.form`\n  height: 100%;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3), inset 0 0 40px rgba(0, 0, 0, 0.1);\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 2rem 0;\n`;\n_c = Form;\n\nconst InterestForm = () => {\n  _s();\n\n  const [submitted, setSubmitted] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const initialValues = {\n    companyName: '',\n    contactName: '',\n    contactMail: '',\n    phone: '',\n    occation: 'other',\n    orgnr: '',\n    delivery: '',\n    deliveryAdress: '',\n    comments: '',\n    dueDate: '',\n    dueDate: '',\n    ponumber: ''\n  };\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onSubmit: async values => {\n      try {\n        const res = await fetch(`https://dg34nuugf4.execute-api.eu-west-1.amazonaws.com/prod/sendMail`, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(values)\n        });\n        if (res.status === 200) setSubmitted(true);\n      } catch (err) {\n        console.log(err);\n        setHasError(true);\n      }\n    },\n    validationSchema: ValidationSchema,\n    children: ({\n      isSubmitting,\n      setSubmitting,\n      submitForm,\n      errors,\n      submitCount\n    }) => {\n      const submit = async e => {\n        e.preventDefault();\n        await submitForm().then(() => setSubmitting(false));\n      }; // Checks if errors is empty. 0 will turn into true, anything else is false\n\n\n      const isValid = !Object.keys(errors).length;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InformationArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CompanyArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ContactPersonArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(OccationArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InvoiceArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CommentsArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SubmitArea, {\n          onClick: submit,\n          loading: isSubmitting,\n          submitted: submitted,\n          isValid: isValid,\n          submitCount: submitCount,\n          hasError: hasError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InterestForm, \"jxAGV8jlhEWdbsWmZUtuZy7TMOM=\");\n\n_c2 = InterestForm;\nexport default InterestForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Form\");\n$RefreshReg$(_c2, \"InterestForm\");","map":{"version":3,"sources":["/home/johan/myshit/invoiceinfo/src/components/Form/index.tsx"],"names":["Formik","React","useState","styled","ValidationSchema","InformationArea","Banner","CompanyArea","ContactPersonArea","OccationArea","CommentsArea","SubmitArea","InvoiceArea","Form","form","InterestForm","submitted","setSubmitted","hasError","setHasError","initialValues","companyName","contactName","contactMail","phone","occation","orgnr","delivery","deliveryAdress","comments","dueDate","ponumber","values","res","fetch","method","headers","body","JSON","stringify","status","err","console","log","isSubmitting","setSubmitting","submitForm","errors","submitCount","submit","e","preventDefault","then","isValid","Object","keys","length"],"mappings":"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","sourcesContent":["import { Formik } from 'formik';\nimport React, { FormEvent, useState } from 'react';\nimport styled from 'styled-components';\nimport { FormData } from '../../common/FormData';\nimport { ValidationSchema } from '../../common/ValidaitonSchema';\nimport InformationArea from './Areas/InformationArea';\nimport { Banner } from '../Banner';\nimport CompanyArea from './Areas/CompanyArea';\nimport ContactPersonArea from './Areas/ContactPersonArea';\nimport OccationArea from './Areas/OccationArea';\nimport CommentsArea from './Areas/CommentsArea';\nimport SubmitArea from './Areas/SubmitArea';\nimport InvoiceArea from './Areas/InvoiceArea';\n\nconst Form = styled.form`\n  height: 100%;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3), inset 0 0 40px rgba(0, 0, 0, 0.1);\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 2rem 0;\n`;\n\nconst InterestForm = () => {\n  const [submitted, setSubmitted] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const initialValues: FormData = {\n    companyName: '',\n    contactName: '',\n    contactMail: '',\n    phone: '',\n    occation: 'other',\n    orgnr: '',\n    delivery: '',\n    deliveryAdress: '',\n    comments: '',\n    dueDate: '',\n    dueDate: '',\n\n    ponumber: '',\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={async (values) => {\n        try {\n          const res = await fetch(`https://dg34nuugf4.execute-api.eu-west-1.amazonaws.com/prod/sendMail`, {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(values),\n          });\n          if (res.status === 200) setSubmitted(true);\n        } catch (err) {\n          console.log(err);\n          setHasError(true);\n        }\n      }}\n      validationSchema={ValidationSchema}\n    >\n      {({ isSubmitting, setSubmitting, submitForm, errors, submitCount }) => {\n        const submit = async (e: FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          await submitForm().then(() => setSubmitting(false));\n        };\n        // Checks if errors is empty. 0 will turn into true, anything else is false\n        const isValid = !Object.keys(errors).length;\n        return (\n          <Form>\n            <Banner />\n            <InformationArea />\n            <CompanyArea />\n            <ContactPersonArea />\n            <OccationArea />\n            <InvoiceArea/>\n            <CommentsArea />\n            <SubmitArea\n              onClick={submit}\n              loading={isSubmitting}\n              submitted={submitted}\n              isValid={isValid}\n              submitCount={submitCount}\n              hasError={hasError}\n            />\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\n\nexport default InterestForm;\n"]},"metadata":{},"sourceType":"module"}