{"ast":null,"code":"var _jsxFileName = \"/home/johan/myshit/invoiceinfo/src/components/Inputs/Select.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Select as DsSelect } from '@dotkomonline/design-system';\nimport styled from 'styled-components';\nimport ReactSelect from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledSelect = styled(ReactSelect)`\n    transition: all 0.2s;\n    padding: 8px 20px 8px 8px;\n    background: #fff;\n    border-radius: 3px;\n    border: 2px solid #ababab;\n    cursor: pointer;\n    &:hover {\n      border-color: #blue;\n    }\n    appearance: none;\n  `;\n_c = StyledSelect;\n\nconst SelectTest = ({\n  options,\n  ...rest\n}) => {\n  return /*#__PURE__*/_jsxDEV(StyledSelect, {\n    options: options,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 12\n  }, this);\n};\n\n_c2 = SelectTest;\n\nconst SelectBase = ({ ...props\n}) => {\n  _s();\n\n  const [selectedOption, setSelectedOption] = useState(props.options[0]);\n\n  const handleChange = option => {\n    setSelectedOption(option);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DsSelect, {\n    name: props.name,\n    options: props.options,\n    value: selectedOption,\n    onChange: option => handleChange(option)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SelectBase, \"mvfafesjcw/Bcnz8kc37RbkbGMc=\");\n\n_c3 = SelectBase;\nconst Select = styled(SelectBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\nexport default Select;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledSelect\");\n$RefreshReg$(_c2, \"SelectTest\");\n$RefreshReg$(_c3, \"SelectBase\");","map":{"version":3,"sources":["/home/johan/myshit/invoiceinfo/src/components/Inputs/Select.tsx"],"names":["React","useState","Select","DsSelect","styled","ReactSelect","StyledSelect","SelectTest","options","rest","SelectBase","props","selectedOption","setSelectedOption","handleChange","option","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,6BAAnC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAME,MAAMC,YAAY,GAAGF,MAAM,CAACC,WAAD,CAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXE;KAAMC,Y;;AAaN,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAW,KAAGC;AAAd,CAAD,KAAuC;AACxD,sBAAO,QAAC,YAAD;AAAc,IAAA,OAAO,EAAED,OAAvB;AAAA,OAAoCC;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;MAAMF,U;;AAeR,MAAMG,UAAU,GAAG,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAA8B;AAAA;;AAC7C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAACU,KAAK,CAACH,OAAN,CAAc,CAAd,CAAD,CAApD;;AAEF,QAAMM,YAAY,GAAIC,MAAD,IAAwB;AAC3CF,IAAAA,iBAAiB,CAACE,MAAD,CAAjB;AACD,GAFD;;AAIA,sBACA,QAAC,QAAD;AACA,IAAA,IAAI,EAAEJ,KAAK,CAACK,IADZ;AAEA,IAAA,OAAO,EAAEL,KAAK,CAACH,OAFf;AAGA,IAAA,KAAK,EAAEI,cAHP;AAIA,IAAA,QAAQ,EAAGG,MAAD,IAAwBD,YAAY,CAACC,MAAD;AAJ9C;AAAA;AAAA;AAAA;AAAA,UADA;AAQD,CAfD;;GAAML,U;;MAAAA,U;AAiBN,MAAMR,MAAM,GAAGE,MAAM,CAACM,UAAD,CAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,eAAeR,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Select as DsSelect } from '@dotkomonline/design-system';\nimport styled from 'styled-components';\nimport ReactSelect from 'react-select';\n\ninterface SelectProps extends StyledComponentProps<'select', any, any, any> {\n    options: [{ value: any; label: any }];\n  }\n  \n  const StyledSelect = styled(ReactSelect)`\n    transition: all 0.2s;\n    padding: 8px 20px 8px 8px;\n    background: #fff;\n    border-radius: 3px;\n    border: 2px solid #ababab;\n    cursor: pointer;\n    &:hover {\n      border-color: #blue;\n    }\n    appearance: none;\n  `;\n  \n  const SelectTest = ({ options, ...rest }: SelectProps) => {\n    return <StyledSelect options={options} {...rest} />;\n  };\n\nexport interface OptionType {\n    value: string;\n    label: string;\n}\n\n\ninterface SelectProps {\n  name: string;\n  options: OptionType[];\n}\n\nconst SelectBase = ({...props }: SelectProps) => {\n    const [selectedOption, setSelectedOption] = useState(props.options[0]);\n\n  const handleChange = (option: OptionType) => {\n    setSelectedOption(option);\n  };\n\n  return (\n  <DsSelect\n  name={props.name}\n  options={props.options}\n  value={selectedOption}\n  onChange={(option: OptionType) => handleChange(option)}\n  />\n  )\n};\n\nconst Select = styled(SelectBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}