{"version":3,"sources":["components/layout.tsx","styles/normalize.ts","common/ValidaitonSchema.ts","components/Area.tsx","components/Form/Areas/InformationArea/index.tsx","components/Form/Areas/InformationArea/informationText.ts","components/Banner.tsx","components/Inputs/TextField.tsx","components/Form/Areas/CompanyArea.tsx","components/Form/Areas/ContactPersonArea.tsx","components/Inputs/Select.tsx","components/Form/Areas/OccationArea.tsx","components/Inputs/TextArea.tsx","components/Form/Areas/CommentsArea.tsx","components/Form/Areas/SubmitArea.tsx","components/Inputs/Checkbox.tsx","components/Inputs/ExtraInfo.tsx","components/Form/Areas/InvoiceArea.tsx","components/Form/index.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledLayout","styled","div","Page","GlobalStyle","createGlobalStyle","Layout","children","className","Helmet","href","rel","ValidationSchema","Yup","shape","companyName","required","max","contactName","contactMail","email","phone","matches","min","occation","orgnr","test","value","Promise","resolve","length","axios","get","encodeURIComponent","then","catch","delivery","deliveryAdress","when","is","comments","notRequired","isduedate","duedate","isponumber","ponumber","S","Title","h2","colors","grayDarken90","Section","section","media","mobileOnly","Div","Area","title","maxWidth","Wrapper","grayDarken30","Details","details","InformationArea","md","Header","header","primary","Heading2","Banner","width","primaryColor","white","secondaryColor","secondary","TextField","props","name","onBlur","onChange","placeholder","useField","field","inputProps","CompanyArea","values","useFormikContext","useEffect","response","data","hasOwnProperty","navn","err","console","log","label","ContactPersonArea","type","Select","meta","selectProps","isInvalid","undefined","error","touched","options","map","option","occations","OccationArea","TextArea","textareaProps","CommentsArea","ButtonDiv","SubmitArea","toast","useToast","loading","submit","submitCount","errors","id","description","status","duration","isClosable","direction","spacing","isLoading","loadingText","colorScheme","onClick","e","Checkbox","ExtraInfo","boolname","InvoiceArea","InterestForm","useState","submitted","setSubmitted","hasError","setHasError","errormap","Map","initialValues","onSubmit","a","fetch","method","headers","body","JSON","stringify","validationSchema","isSubmitting","setSubmitting","submitForm","isValid","Object","keys","newErrors","preventDefault","join","as","marginY","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","theme","OnlineTheme","resetCSS","document","getElementById"],"mappings":"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","file":"static/js/main.5da3ae9f.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Helmet from 'react-helmet';\nimport normalize from '../styles/normalize';\n\nconst StyledLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min(75ch, 100%) 1fr;\n\n  & > * {\n    grid-column: 2;\n  }\n`;\n\nconst Page = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\ninterface LayoutProps {\n  className?: string;\n}\nconst GlobalStyle = createGlobalStyle`${normalize}`;\n\nconst Layout: React.FC<LayoutProps> = ({ children, className }) => (\n  <>\n    <Helmet>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto+Mono:300,400,700|Montserrat:300,400,700|Material+Icons+Outlined\"\n        rel=\"stylesheet\"\n      />\n    </Helmet>\n    <GlobalStyle />\n    <StyledLayout className={className}>\n      <Page>{children}</Page>\n    </StyledLayout>\n  </>\n);\n\nexport default Layout;\n","export default `\n  :root {\n    --font-size-md:14px;\n  }\n  html {\n    box-sizing: border-box;\n    background-color: #f2f2f2\n  }\n\n  html, body, #___gatsby, #gatsby-focus-wrapper {\n    box-sizing: border-box;\n    font-family: Montserrat, Roboto,'Source Serif Pro',sans-serif;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n  }\n\n  body{\n    font-family: 'Source Sans Pro', sans-serif;\n    line-height: 1.5;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n`;\n","import * as Yup from 'yup';\nimport axios from 'axios';\n\nexport const ValidationSchema = Yup.object().shape({\n  companyName: Yup.string().required('Dette feltet er påkrevd').max(250, 'Navnet er for langt'),\n  contactName: Yup.string().required('Dette feltet er påkrevd').max(150, 'Navnet er for langt'),\n  contactMail: Yup.string()\n    .required('Dette feltet er påkrevd')\n    .email('Ugyldig format på mailen')\n    .max(200, 'Mailen er for lang'),\n  phone: Yup.string()\n    .required('Dette feltet er påkrevd')\n    .matches(/([+]{0,1}[0-9\\s]+)/, 'Telefonnummer er ugyldig og bør kun inneholde tall og maks 1 \"+\"')\n    .min(8, 'Telefonnummer for kort!')\n    .max(16, 'Telefonnummeret er for langt!'),\n  occation: Yup.string().required('Dette feltet er påkrevd'),\n  orgnr: Yup.string()\n    .min(9, 'Organisasjonsnummeret må være 9 siffre')\n    .max(9, 'Organisasjonsnummeret må være 9 siffre')\n    // eslint-disable-next-line no-async-promise-executor\n    .test(\n      'validateOrgnr',\n      'Organisasjonsnummeret finnes ikke i Brønnøysundregistrene',\n      (value) =>\n        new Promise((resolve) => {\n          if (value && value.length === 9) {\n            axios\n              .get(`https://data.brreg.no/enhetsregisteret/api/enheter/${encodeURIComponent(value)}`)\n              .then(() => {\n                resolve(true);\n              })\n              .catch(() => {\n                resolve(false);\n              });\n          }\n        })\n    )\n    .required('Dette feltet er påkrevd'),\n  delivery: Yup.string().required('Dette feltet er påkrevd'),\n  deliveryAdress: Yup.string().when('delivery', {\n    is: (delivery: string) => delivery === 'epost' || delivery === 'adresse',\n    then: Yup.string().required('Dette feltet er påkrevd'),\n  }),\n  comments: Yup.string().notRequired().max(2000, 'Prøv å skriv under 2000 tegn'),\n  isduedate: Yup.boolean(),\n  duedate: Yup.string().when('isduedate', {\n    is: (isduedate: boolean) => isduedate,\n    then: Yup.string().required('Dette feltet er påkrevd'),\n  }),\n  isponumber: Yup.boolean(),\n  ponumber: Yup.string().when('isponumber', {\n    is: (isponumber: boolean) => isponumber,\n    then: Yup.string().required('Dette feltet er påkrevd'),\n  }),\n});\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { colors, media } from '@dotkomonline/design-system';\n\ninterface AreaProps {\n  title?: string;\n  maxWidth?: boolean;\n}\n\nconst S = {\n  Title: styled.h2`\n    color: ${colors.grayDarken90};\n    letter-spacing: 0.5px;\n    margin-bottom: 10px;\n    font-size: 1.4rem;\n  `,\n  Section: styled.section`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    flex-grow: 1;\n    width: 100%;\n    padding: 20px 50px;\n    @media ${media.mobileOnly} {\n      padding: 10px 20px;\n    }\n  `,\n  Div: styled.div`\n    display: grid;\n    grid-gap: 1rem;\n    grid-template-rows: repeat(1fr);\n    max-width: 500px;\n    width: 100%;\n    margin: 0 auto;\n  `,\n};\n\nconst Area: FC<AreaProps> = ({ title, maxWidth, children }) => (\n  <S.Section>\n    {title && <S.Title>{title}</S.Title>}\n    {maxWidth ? children : <S.Div>{children}</S.Div>}\n  </S.Section>\n);\n\nexport default Area;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { colors, md } from '@dotkomonline/design-system';\nimport Area from '../../../Area';\nimport { introText } from './informationText';\n\nconst S = {\n  Wrapper: styled.div`\n    font-size: 1rem;\n    padding: 15px 0px;\n    line-height: 1.5;\n    border-width: 1px 0px;\n    border-color: ${colors.grayDarken30};\n    border-style: solid;\n  `,\n  Details: styled.details`\n    margin: 1.25rem 0;\n    summary {\n      margin-bottom: 1rem;\n    }\n  `,\n};\n\nconst InformationArea = (): JSX.Element => (\n  <Area maxWidth>\n    <S.Wrapper>{md`${introText}`}</S.Wrapper>\n  </Area>\n);\n\nexport default InformationArea;\n","export const introText = `\nDenne blanketten bør helst fylles ut av økonomiavdelingen.\nInformasjonen forsikrer at det ikke oppstår feil eller manglende informasjon ved fakturering og betaling.\n\nEventuelle spørsmål kan sendes til kontakten deres, evt til [bedkom@online.ntnu.no](mailto:bedkom@online.ntnu.no) eller\n [fagkom@online.ntnu.no](mailto:fagkom@online.ntnu.no)\n`;\n\nexport const productDetails = ` ekstra info`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { colors, Logo, Heading2 } from '@dotkomonline/design-system';\n\nconst S = {\n  Header: styled.header`\n    background-color: ${colors.primary};\n    width: 100%;\n    margin-bottom: 1.5rem;\n    padding: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  `,\n  Title: styled(Heading2)`\n    text-align: center;\n    color: white;\n    margin-top: 1rem;\n  `,\n};\n\nexport const Banner: React.FC = () => (\n  <>\n    <S.Header>\n      <Logo width=\"75%\" primaryColor={colors.white} secondaryColor={colors.secondary} />\n      <S.Title>Innsending av fakturainformasjon</S.Title>\n    </S.Header>\n  </>\n);\n","import React, { FC } from 'react';\nimport { useField } from 'formik';\nimport { InputControl } from 'formik-chakra-ui';\nimport styled from 'styled-components';\n\ntype TextFieldProps = {\n  name: string;\n  onBlur?: () => void;\n  onChange?: () => void;\n  value?: string;\n  placeholder: string;\n  label?: string;\n  type?: string;\n};\n\nconst S = {\n  Wrapper: styled.div`\n    display: flex-column;\n    justify-content: center;\n    margin-bottom: -1.7rem;\n    margin-top: 0.3rem;\n\n    & > div {\n      max-width: 500px;\n      width: 100%;\n    }\n  `,\n};\n\nconst TextField: FC<TextFieldProps> = (props) => {\n  const { name, onBlur, onChange, value, placeholder } = props;\n  const [field] = useField<string>({ name, onBlur, onChange, value });\n  return (\n    <S.Wrapper>\n      <InputControl inputProps={{ placeholder }} {...field} {...props} />\n      <br />\n    </S.Wrapper>\n  );\n};\n\nexport default TextField;\n","import React, { FC, useEffect } from 'react';\nimport { FormikProps, FormikValues, useFormikContext } from 'formik';\nimport axios from 'axios';\nimport TextField from '../../Inputs/TextField';\nimport Area from '../../Area';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst CompanyArea: FC<{}> = () => {\n  const { values }: FormikProps<FormikValues> = useFormikContext();\n  const { orgnr, companyName } = values;\n\n  useEffect(() => {\n    if (orgnr.length === 9 && companyName === '') {\n      axios\n        .get(`https://data.brreg.no/enhetsregisteret/api/enheter/${encodeURIComponent(values.orgnr)}`)\n        .then((response) => {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const { data }: { data: any } = response;\n          // eslint-disable-next-line no-prototype-builtins\n          if (typeof data === 'object' && data && data.hasOwnProperty('navn')) {\n            const { navn } = data;\n            values.companyName = navn;\n          }\n        })\n        .catch((err) => {\n          // eslint-disable-next-line no-console\n          console.log(`mail error: ${err}`);\n        });\n    }\n  }, [values.orgnr]);\n  return (\n    <Area title=\"Bedrift\">\n      <TextField name=\"orgnr\" label=\"Organisasjonsnummer\" placeholder=\"460059275\" />\n      <TextField name=\"companyName\" label=\"Bedriftsnavn\" placeholder=\"Bedrift AS\" />\n    </Area>\n  );\n};\n\nexport default CompanyArea;\n","import React, { FC } from 'react';\nimport Area from '../../Area';\nimport TextField from '../../Inputs/TextField';\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst ContactPersonArea: FC<{}> = () => (\n  <Area title=\"Kontaktperson\">\n    <TextField label=\"Navn\" name=\"contactName\" placeholder=\"Ola Nordmann\" />\n    <TextField name=\"contactMail\" type=\"email\" label=\"E-post\" placeholder=\"olanordmann@bedrift.com\" />\n    <TextField name=\"phone\" type=\"tel\" label=\"Telefonnummer\" placeholder=\"+47 404 69 418\" />\n  </Area>\n);\n\nexport default ContactPersonArea;\n","import React from 'react';\nimport { useField } from 'formik';\nimport { SelectControl } from 'formik-chakra-ui';\nimport styled from 'styled-components';\n\nconst S = {\n  Wrapper: styled.div`\n    display: flex;\n    justify-content: center;\n    margin-bottom: 1.3rem;\n\n    & > div {\n      max-width: 500px;\n      width: 100%;\n    }\n  `,\n};\n\n// const SelectTest = ({ options, ...rest }: SelectPropsTest) => <StyledSelect options={options} {...rest} />;\n\nexport interface OptionType {\n  value: string;\n  label: string;\n}\n\ninterface SelectProps {\n  name: string;\n  label: string;\n  options: OptionType[];\n}\n\nconst SelectBase = ({ ...props }: SelectProps) => {\n  const [field, meta] = useField({ type: 'select', ...props });\n  const placeholder = props.label;\n\n  return (\n    <S.Wrapper>\n      <SelectControl\n        {...field}\n        name={props.name}\n        selectProps={{ placeholder }}\n        isInvalid={meta.error !== undefined && meta.touched}\n      >\n        {props.options.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </SelectControl>\n    </S.Wrapper>\n  );\n};\n\nconst Select = styled(SelectBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\n\nexport default Select;\n","import React, { FC } from 'react';\nimport Area from '../../Area';\nimport Select, { OptionType } from '../../Inputs/Select';\n\n// Bedriftsarrangement, Annonse i Offline, Stillingsutlysning, Tech Talks og IT-ekskursjonen.\nconst occations: OptionType[] = [\n  {\n    value: 'bedpres',\n    label: 'Bedriftsarrangement',\n  },\n  {\n    value: 'kurs',\n    label: 'Kurs',\n  },\n  {\n    value: 'offline',\n    label: 'Annonse i Offline',\n  },\n  {\n    value: 'online_ad',\n    label: 'Stillingsutlysning',\n  },\n  {\n    value: 'techtalks',\n    label: 'Tech Talks',\n  },\n  {\n    value: 'excursion',\n    label: 'IT-ekskursjonen',\n  },\n  {\n    value: 'other',\n    label: 'Annet',\n  },\n];\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst OccationArea: FC<{}> = () => (\n  <Area title=\"Velg anledningen fakturaen skal sendes for\">\n    <Select name=\"occation\" options={occations} label=\"Anledning\" />\n  </Area>\n);\n\nexport default OccationArea;\n","import React, { FC } from 'react';\nimport { useField } from 'formik';\nimport { TextareaControl } from 'formik-chakra-ui';\nimport styled from 'styled-components';\n\ntype TextAreaProps = {\n  name: string;\n  onBlur?: () => void;\n  onChange?: () => void;\n  value?: string;\n  placeholder: string;\n};\n\nconst S = {\n  Wrapper: styled.div`\n    display: flex;\n    justify-content: center;\n    & > div {\n      width: 100%;\n      max-width: 500px;\n    }\n  `,\n};\n\nconst TextArea: FC<TextAreaProps> = (props) => {\n  const { name, onBlur, onChange, value, placeholder } = props;\n  const [field] = useField<string>({ name, onBlur, onChange, value });\n\n  return (\n    <S.Wrapper>\n      <TextareaControl textareaProps={{ placeholder }} {...field} {...props} />\n      <br />\n    </S.Wrapper>\n  );\n};\n\nexport default TextArea;\n","import React from 'react';\nimport Area from '../../Area';\nimport TextArea from '../../Inputs/TextArea';\n\nconst CommentsArea = (): JSX.Element => (\n  <Area title=\"Kommentarer\">\n    <TextArea\n      name=\"comments\"\n      placeholder=\"Dersom dere har noen ønsker utover det som er fylt inn ovenfor, vennligst skriv her\"\n    />\n  </Area>\n);\n\nexport default CommentsArea;\n","import React, { FC, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { SubmitButton, ResetButton } from 'formik-chakra-ui';\nimport { useToast } from '@chakra-ui/react';\nimport { Stack } from '@dotkomonline/yacl';\nimport Area from '../../Area';\n\ninterface SubmitAreaProps {\n  loading: boolean;\n  submit: (e: { preventDefault: () => void }) => Promise<void>;\n  submitCount: number;\n  isInvalid: boolean;\n  errors: string;\n}\n\nconst S = {\n  Wrapper: styled.div`\n    width: 100%;\n    max-width: 500px;\n    display: flex;\n    justify-content: center;\n    gap: 2rem;\n  `,\n  ButtonDiv: styled.div`\n    display: flex;\n  `,\n};\n\nconst SubmitArea: FC<SubmitAreaProps> = ({ ...props }) => {\n  const toast = useToast();\n\n  const { loading, submit, submitCount, isInvalid, errors } = props;\n\n  useEffect(() => {\n    if (submitCount > 0 && isInvalid) {\n      toast({\n        id: 'warning',\n        title: 'Informasjon mangler',\n        description: `Venligst sjekk at disse feltene er fylt ut: ${errors}`,\n        status: 'warning',\n        duration: 9000,\n        isClosable: true,\n      });\n    }\n  }, [submitCount, isInvalid]);\n\n  return (\n    <Area>\n      <S.Wrapper>\n        <Stack direction=\"row\" spacing={4}>\n          <SubmitButton\n            isLoading={loading}\n            loadingText=\"Submitting\"\n            colorScheme=\"blue\"\n            onClick={(e) => {\n              submit(e);\n            }}\n          >\n            Submit\n          </SubmitButton>\n          <ResetButton colorScheme=\"blue\">reset</ResetButton>\n        </Stack>\n      </S.Wrapper>\n    </Area>\n  );\n};\n\nexport default SubmitArea;\n","import React from 'react';\nimport { CheckboxControl } from 'formik-chakra-ui';\nimport { useField } from 'formik';\nimport styled from 'styled-components';\n\ninterface CheckboxProps {\n  value: string;\n  name: string;\n  label: string;\n}\n\nconst CheckboxBase = ({ label, ...props }: CheckboxProps) => {\n  const [field, meta] = useField({ type: 'checkbox', ...props });\n  const { value, onChange } = field;\n  return (\n    <>\n      <CheckboxControl\n        {...value}\n        name={props.name}\n        onChange={(e) => {\n          onChange(e);\n        }}\n      >\n        {label}\n      </CheckboxControl>\n      {meta.error && meta.touched && <div>{meta.error}</div>}\n    </>\n  );\n};\n\nconst Checkbox = styled(CheckboxBase)`\n  & + div {\n    & > i {\n      font-size: 1.2rem;\n      position: absolute; /* Required or else the checkmark looks fucked*/\n    }\n  }\n`;\n\nexport default Checkbox;\n","import { FormikProps, FormikValues, useFormikContext } from 'formik';\nimport React, { FC, useEffect } from 'react';\nimport Checkbox from './Checkbox';\nimport TextField from './TextField';\n\ninterface ExtraInfoProps {\n  name: string;\n  label: string;\n}\n\nconst ExtraInfo: FC<ExtraInfoProps> = ({ name, label }) => {\n  const { values }: FormikProps<FormikValues> = useFormikContext();\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  useEffect(() => {}, [values[name]]);\n\n  const boolname = `is${name}`;\n\n  return (\n    <div>\n      <Checkbox label={`Ønsker ${label}`} name={boolname} value={values[boolname]} />\n      {values[boolname] ? (\n        <>\n          <br />\n          <TextField name={name} placeholder={label} />\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default ExtraInfo;\n","import React, { FC } from 'react';\nimport { FormikProps, FormikValues, useFormikContext } from 'formik';\nimport TextField from '../../Inputs/TextField';\nimport Area from '../../Area';\nimport Select, { OptionType } from '../../Inputs/Select';\nimport ExtraInfo from '../../Inputs/ExtraInfo';\n\nconst delivery: OptionType[] = [\n  {\n    value: 'ehf',\n    label: 'EHF',\n  },\n  {\n    value: 'epost',\n    label: 'Epost',\n  },\n  {\n    value: 'adresse',\n    label: 'Brev',\n  },\n];\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst InvoiceArea: FC<{}> = () => {\n  const { values }: FormikProps<FormikValues> = useFormikContext();\n  return (\n    <Area title=\"Fakturainformasjon\">\n      <Select name=\"delivery\" options={delivery} label=\"Leveringsmetode\" />\n      {values.delivery !== 'ehf' && values.delivery !== '' ? (\n        <TextField name=\"deliveryLocation\" label={values.delivery} placeholder={`Ønsket ${values.delivery}`} />\n      ) : null}\n      <ExtraInfo name=\"ponumber\" label=\"PO-nummer\" />\n      <ExtraInfo name=\"duedate\" label=\"Foretrukket forfallsdato\" />\n    </Area>\n  );\n};\n\nexport default InvoiceArea;\n","import { Formik } from 'formik';\nimport React, { useState } from 'react';\nimport { Box } from '@dotkomonline/yacl';\nimport { useToast } from '@chakra-ui/react';\nimport { FormData } from '../../common/FormData';\nimport { ValidationSchema } from '../../common/ValidaitonSchema';\nimport InformationArea from './Areas/InformationArea';\nimport { Banner } from '../Banner';\nimport CompanyArea from './Areas/CompanyArea';\nimport ContactPersonArea from './Areas/ContactPersonArea';\nimport OccationArea from './Areas/OccationArea';\nimport CommentsArea from './Areas/CommentsArea';\nimport SubmitArea from './Areas/SubmitArea';\nimport InvoiceArea from './Areas/InvoiceArea';\n\nconst InterestForm = (): JSX.Element => {\n  const [submitted, setSubmitted] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const toast = useToast();\n\n  const initialValues: FormData = {\n    companyName: '',\n    contactName: '',\n    contactMail: '',\n    phone: '',\n    occation: '',\n    orgnr: '',\n    delivery: '',\n    deliveryAdress: '',\n    comments: '',\n    isduedate: false,\n    duedate: '',\n    isponumber: false,\n    ponumber: '',\n  };\n\n  const errormap = new Map([\n    ['companyName', 'bedriftsnavn'],\n    ['contactName', 'kontaktperon - navn'],\n    ['contactMail', 'kontaktperon - mail'],\n    ['phone', 'kontaktperon - telefonnummer'],\n    ['occation', 'anledning'],\n    ['orgnr', 'organisasjonsnummer'],\n    ['delivery', 'leveringsmetode'],\n    ['deliveryAdress', 'Adresse - leveringsmetode'],\n    ['comments', 'kommetarer'],\n    ['duedate', 'forfallsdato'],\n    ['ponumber', 'ponummer'],\n  ]);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={async (values) => {\n        try {\n          const res = await fetch(`https://pgs9depyui.execute-api.eu-north-1.amazonaws.com/prod/sendMail`, {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(values),\n          });\n          if (res.status === 200) setSubmitted(true);\n        } catch (err) {\n          setHasError(true);\n        }\n\n        if (hasError)\n          toast({\n            title: 'Sending feilet!',\n            description: 'Noe gikk galt under innsending av fakturainformasjonen, Venligst send en beskrivende mail',\n            status: 'error',\n            duration: 9000,\n            isClosable: true,\n          });\n\n        if (submitted)\n          toast({\n            title: 'Fakturainformasjon sendt!',\n            description: 'en konfirmasjonsmail vil bli sendt til kontakt mail',\n            status: 'success',\n            duration: 9000,\n            isClosable: true,\n          });\n      }}\n      validationSchema={ValidationSchema}\n    >\n      {({ isSubmitting, setSubmitting, submitForm, errors, submitCount, values }) => {\n        const isValid = !Object.keys(errors).length;\n        const newErrors = Object.keys(errors).map((err) => errormap.get(err));\n        // TODO: remove console.log\n        const submit = async (e: { preventDefault: () => void }) => {\n          e.preventDefault();\n          await submitForm().then(() => {\n            setSubmitting(false);\n          });\n        };\n\n        // Checks if errors is empty. 0 will turn into true, anything else is false\n        return (\n          <Box>\n            <Banner />\n            <InformationArea />\n            <CompanyArea />\n            <ContactPersonArea />\n            <OccationArea />\n            <InvoiceArea />\n            <CommentsArea />\n            <SubmitArea\n              loading={isSubmitting}\n              submit={submit}\n              submitCount={submitCount}\n              isInvalid={!isValid}\n              errors={newErrors.join(', ')}\n            />\n            <Box as=\"pre\" marginY={10}>\n              {JSON.stringify(values, null, 2)}\n              <br />\n              {JSON.stringify(errors, null, 2)}\n            </Box>\n          </Box>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default InterestForm;\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { OnlineTheme, ThemeProvider } from '@dotkomonline/yacl';\nimport Layout from './components/layout';\nimport InterestForm from './components/Form';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={OnlineTheme} resetCSS>\n      <Layout>\n        <InterestForm />\n      </Layout>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}